[{"categories":["WPF"],"content":"布局控件\r","date":"2025-08-03","objectID":"/csharp/wpf/64d18599-4cf7-40aa-b995-9cc111f50bd3/:0:0","tags":["WPF","C#"],"title":"布局控件","uri":"/csharp/wpf/64d18599-4cf7-40aa-b995-9cc111f50bd3/"},{"categories":["WPF"],"content":"WPF概述\rWindows Presentation Foundation 桌面指南（WPF），这是一个独立于分辨率的 UI 框架，它使用基于矢量的呈现引擎，旨在利用现代图形硬件。 WPF 提供了一组全面的应用程序开发功能，其中包括可扩展应用程序标记语言（XAML）、控件、数据绑定、布局、2D 和 3D 图形、动画、样式、模板、文档、媒体、文本和版式。 WPF 是 .NET 的一部分，因此可以生成包含 .NET API 其他元素的应用程序。 WPF 有两个实现： .NET 版本（本指南）： .NET Framework 4 版本： 尽管.Net是一种跨平台技术，但是WPF仅能在Windows上运行。 什么是XAML？\rXAML 是基于 XML 的标记语言，以声明方式实现应用程序的外观。 通常使用它来定义窗口、对话框、页面和用户控件，并用控件、形状和图形填充它们。 以下示例使用 XAML 实现包含单个按钮的窗口的外观： \u003cWindow xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" Title=\"Window with button\" Width=\"250\" Height=\"100\"\u003e \u003c!-- Add button to window --\u003e \u003cButton Name=\"button\"\u003eClick Me!\u003c/Button\u003e \u003c/Window\u003e 具体而言，此 XAML 使用 Window 和 Button 元素定义窗口和按钮。 每个元素都配置了属性，例如 Window 元素的 Title 属性来指定窗口的标题栏文本。 在运行时，WPF 将标记中定义的元素和属性转换为 WPF 类的实例。 例如，Window 元素转换为 Window 类的实例，该类 Title 属性是 Title 特性的值。 下图显示了上一示例中 XAML 定义的用户界面（UI）： WPF的项目结构\r创建WPF应用程序。 App.xaml 与 App.xaml.cs 入口点：定义应用程序启动逻辑，通过StartupUri指定初始窗口（如StartupUri=“MainWindow.xaml”）。 全局资源：在\u003cApplication.Resources\u003e中定义样式、数据模板等资源，供整个应用复用。 生命周期事件：在App.xaml.cs中重写OnStartup()初始化服务，OnExit()执行清理逻辑，DispatcherUnhandledException捕获全局异常。 MainWindow.xaml 与 MainWindow.xaml.cs 主窗口UI：XAML文件定义布局和控件（如按钮、文本框）。 事件处理：代码文件（xaml.cs）实现交互逻辑（如按钮点击事件）。 App.xaml\rApp.xaml 是 WPF（Windows Presentation Foundation）应用程序的核心文件，承担着应用程序入口点、全局资源配置中心和生命周期事件处理器等关键角色。其核心作用可归纳为以下五类： 应用程序入口与启动控制\r启动窗口定义：通过StartupUri属性指定初始窗口（如 StartupUri=\"MainWindow.xaml\"），简化启动流程。 自定义启动逻辑：删除StartupUri后，可在App.xaml.cs中重写OnStartup 方法，实现动态初始化（如窗口预配置、参数解析、依赖注入容器初始化等操作）： protected override void OnStartup(StartupEventArgs e) { base.OnStartup(e); // 示例：解析启动参数 if (e.Args.Contains(\"debug\")) DebugMode.Enable(); // 动态创建主窗口 var mainWindow = new MainWindow(); mainWindow.Title = \"Custom Title\"; mainWindow.Show(); } 全局资源集中管理\r统一样式与模板：在\u003cApplication.Resources\u003e中定义应用级资源（样式、画笔、数据模板等），确保UI一致性： \u003cApplication.Resources\u003e \u003cStyle TargetType=\"Button\"\u003e \u003cSetter Property=\"Foreground\" Value=\"Red\"/\u003e \u003cSetter Property=\"FontSize\" Value=\"14\"/\u003e \u003c/Style\u003e \u003cResourceDictionary\u003e \u003cResourceDictionary.MergedDictionaries\u003e \u003cResourceDictionary Source=\"Styles/Icons.xaml\"/\u003e \u003c/ResourceDictionary.MergedDictionaries\u003e \u003c/ResourceDictionary\u003e \u003c/Application.Resources\u003e 多语言支持：通过合并不同语言的资源字典（如 en-us.xaml, zh-cn.xaml），实现动态切换界面语言。 应用程序生命周期管理\r关键事件处理： OnStartup：初始化全局状态（如数据库连接、配置加载）。 OnExit：执行清理任务（如保存用户数据、释放资源）。 OnSessionEnding：拦截系统关机/注销事件，提示未保存数据： protected override void OnSessionEnding(SessionEndingCancelEventArgs e) { if (HasUnsavedData) { e.Cancel = true; MessageBox.Show(\"数据未保存！\"); } } 未处理异常捕获：订阅 DispatcherUnhandledException 事件，防止崩溃并记录错误。 统一 UI 行为与线程管理\r全局样式生效范围：在App.xaml中定义的隐式样式（无x:Key）自动应用于所有匹配控件，无需显式引用。 UI 线程安全：通过Application.Current.Dispatcher.Invoke确保跨线程操作 UI 的安全性（但OnStartup中无需调用，因已在主线程）。 高级配置与扩展性\r关闭模式控制：ShutdownMode属性决定应用退出时机： OnLastWindowClose（默认）：所有窗口关闭后退出。 OnMainWindowClose：主窗口关闭即退出。 OnExplicitShutdown：需手动调用 Application.Current.Shutdown()。 依赖注入集成：在OnStartup中初始化容器（如 Unity、Autofac），注册全局服务： public static IUnityContainer Container; protected override void OnStartup(StartupEventArgs e) { Container = new UnityContainer(); Container.RegisterType\u003cIDataService, DataService\u003e(); base.OnStartup(e); } Application的生命周期\rWPF（Windows Presentation Foundation）应用程序的生命周期由 Application 类管理，涵盖从启动到关闭的全过程，开发者可通过重写方法或订阅事件介入关键节点。以下是核心阶段及关键行为的解析： 启动阶段（Startup）\r触发时机：应用程序入口点（Main 方法）调用 Application.Run() 后，主窗口显示前。 核心方法：OnStartup(StartupEventArgs e)： 用于初始化全局资源（如数据库连接、配置加载）、解析命令行参数（e.Args），或动态创建启动窗口（替代 StartupUri）。 protected override void OnStartup(StartupEventArgs e) { base.OnStartup(e); MainWindow = new CustomWindow(); // 动态创建主窗口 MainWindow.Show(); } 启动画面（Splash Screen）：通过添加图像文件并设置生成操作为 SplashScreen，实现启动瞬间显示初始界面。 原生SplashScreen实现，适用于静态图片场景，性能最优，由系统级 API 支持。 实现步骤： 添加图片资源 在项目中添加图片（支持 PNG、JPEG、BMP 等格式）。 属性设置：右键图片 → 生成操作 选 SplashScreen（VS 自动生成代码）。 代码控制显示逻辑（可选高级配置） protected override void OnStartup(StartupEventArgs e) { // 创建 SplashScreen 实例（图片路径需匹配资源名） var splash = new SplashScreen(\"SplashImage.png\"); // 非自动关闭 + 置顶显示 splash.Show(false, true); // 设置超时关闭（防止主窗口卡死导致 Splash 滞留） var timer = new Timer(_ =\u003e { Dispatcher.Invoke(() =\u003e splash.Close(TimeSpan","date":"2025-08-02","objectID":"/csharp/wpf/892c051/:0:0","tags":["WPF","C#"],"title":"WPF入门","uri":"/csharp/wpf/892c051/"}]